security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    role_hierarchy:
        ROLE_SUPER_ADMIN: ['ROLE_ADMIN']

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_interne:
            pattern: ^/api/internal
            stateless: true
        main:
            lazy: true
            provider: app_user_provider
            entry_point: App\Security\LoginAuthenticator
            custom_authenticator:
                - App\Security\LoginAuthenticator
                - App\Security\SocialAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/administration, roles: [ROLE_ADMIN] }
        - { path: ^/espace-carriere, roles: [ROLE_ADMIN, ROLE_STUDENT, ROLE_COMPANY] }
        - { path: ^/api/internal, allow_if: 'request.headers.has("X-INTERNAL-API-TOKEN") and "%env(X_INTERNAL_API_TOKEN)%" === request.headers.get("X-INTERNAL-API-TOKEN")' }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
